import * as t from 'tinyemitter';
import * as g from './core';
import * as ta from './plugins/fixed-table';
import BaseGrid from './core';
import fixedHeader from './plugins/fixed-header';
import fixedTable from './plugins/fixed-table';
import sort from './plugins/sort';
import selection from './plugins/selection';
declare const _default: {
    new (...args: any[]): {
        selectedRow: object | null;
        ch?: Function | undefined;
        setSelected(row?: object | null): boolean;
        setData(data: g.TableData): void;
        destroy(...args: any[]): void;
        readonly el: HTMLDivElement;
        readonly ui: {
            [prop: string]: HTMLElement;
        };
        options: g.InnerDataGridOptions;
        curData: g.TableData;
        children?: g.default[] | undefined;
        fixedTables?: ta.FixedGrids | undefined;
        readonly parent?: g.default | undefined;
        fixedColumns?: number | undefined;
        fixedPlace?: "left" | "right" | undefined;
        showModal(html?: string): void;
        hideModal(): void;
        e: any;
        on(name: string, handle: t.IHandle): void;
        off(name: string, handle?: t.IHandle | undefined): void;
        emit(name: string, ...args: any[]): void;
    };
} & {
    new (...args: any[]): {
        sortColumn: string | g.ColumnObj | null;
        sortOrderIndex: number;
        clickEventHandler?: Function | undefined;
        setSort(sortColumn?: string | g.ColumnObj | null, newOrderIndex?: number): void;
        destroy(...args: any[]): void;
        readonly el: HTMLDivElement;
        readonly ui: {
            [prop: string]: HTMLElement;
        };
        options: g.InnerDataGridOptions;
        curData: g.TableData;
        children?: g.default[] | undefined;
        fixedTables?: ta.FixedGrids | undefined;
        readonly parent?: g.default | undefined;
        fixedColumns?: number | undefined;
        fixedPlace?: "left" | "right" | undefined;
        setData(data: g.TableData): void;
        showModal(html?: string): void;
        hideModal(): void;
        e: any;
        on(name: string, handle: t.IHandle): void;
        off(name: string, handle?: t.IHandle | undefined): void;
        emit(name: string, ...args: any[]): void;
    };
} & {
    new (...args: any[]): {
        fixedHeaderWrapper: HTMLDivElement;
        fixedTHead: HTMLTableSectionElement;
        fixedTheadRow: HTMLTableRowElement;
        readonly fixedHeaderTable: HTMLTableElement;
        readonly colGroup: HTMLTableColElement;
        readonly unbindEvents?: Function[] | undefined;
        syncFixedHeader(): void;
        setData(data: g.TableData): void;
        destroy(...args: any[]): void;
        readonly el: HTMLDivElement;
        readonly ui: {
            [prop: string]: HTMLElement;
        };
        options: g.InnerDataGridOptions;
        curData: g.TableData;
        children?: g.default[] | undefined;
        fixedTables?: ta.FixedGrids | undefined;
        readonly parent?: g.default | undefined;
        fixedColumns?: number | undefined;
        fixedPlace?: "left" | "right" | undefined;
        showModal(html?: string): void;
        hideModal(): void;
        e: any;
        on(name: string, handle: t.IHandle): void;
        off(name: string, handle?: t.IHandle | undefined): void;
        emit(name: string, ...args: any[]): void;
    };
} & {
    new (...args: any[]): {
        lastHoverIndex: number | undefined;
        readonly fixedTableEvents?: Function[] | undefined;
        setFixed(count: number, place?: "left" | "right"): void;
        syncFixedWidth(place: "left" | "right"): void;
        destroy(...args: any[]): void;
        createFixedGrid(place: "left" | "right"): g.default;
        readonly el: HTMLDivElement;
        readonly ui: {
            [prop: string]: HTMLElement;
        };
        options: g.InnerDataGridOptions;
        curData: g.TableData;
        children?: g.default[] | undefined;
        fixedTables?: ta.FixedGrids | undefined;
        readonly parent?: g.default | undefined;
        fixedColumns?: number | undefined;
        fixedPlace?: "left" | "right" | undefined;
        setData(data: g.TableData): void;
        showModal(html?: string): void;
        hideModal(): void;
        e: any;
        on(name: string, handle: t.IHandle): void;
        off(name: string, handle?: t.IHandle | undefined): void;
        emit(name: string, ...args: any[]): void;
    };
} & typeof g.default;
export default _default;
export { BaseGrid, fixedHeader, fixedTable, sort, selection };
